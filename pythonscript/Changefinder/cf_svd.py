# -*- coding: utf-8 -*-
"""CF_SVD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aENF_UEeybJON40KKnskA8JpMpRvam7f
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sys

def extract_matrix(data,end,w):
  """
  w : データをずらしていく窓の幅
  start :　観測開始とする時刻
  data : 初期から用意しているデータ
  """
  row = w
  matrix = np.ones((data.shape[1],w))
  for t in range(w):
    data1 = data[end-t:end-t+1].values.T
    """
    print(w)
    print(end-t,end-t+1)
    print(data1)
    """
    data1 = data1.reshape((data.shape[1]))
    matrix[:,t] = data1
  return matrix

def sst(data, w, m=2):
  change_scores = np.zeros(len(data))
  cf_score = []
  for frame in range(w,len(data)-int(w/2)):
    sum = 0
    #履歴行列
    tra_matrix =extract_matrix(data,frame, w)
    #テスト行列
    test_matrix = extract_matrix(data,frame + int(w/2),w)
    #特異値分解
    U_tra, lamda_tra, V_tra  = np.linalg.svd(tra_matrix, full_matrices=False)
    U_test, lamda_test, V_test = np.linalg.svd(test_matrix, full_matrices=False)
    myu_test = V_test[0:1]
    a = myu_test.dot(V_tra.T)
    vector = a.reshape(a.shape[1])
    #print(type(vector))
    for element in vector:
      #print(element)
      sum+=element*element
    cf_score.append(1-sum)
  return cf_score
basepass = sys.argv[1]
df = pd.read_csv(basepass + "3DFiltered.csv")
print(df)

Joint = pd.concat([df.RSholderX,df.LSholderX],axis = 1)
Joint1 = pd.concat([df.RSholderZ,df.LSholderZ],axis = 1)
Joint_diff = Joint.diff()
Joint1_diff = Joint1.diff()
print(Joint)
#Joint.plot(subplots=True, figsize=(20, Joint.shape[1] * 5))

for w1 in range(1,6):
  A = sst(Joint,w1*3)
  x =[]
  for i in range(len(A)):
    x.append((i+w1*3)/30)
  print(x)
  plt.rcParams['figure.figsize'] = [6.4, 4.8]
  plt.rcParams["font.size"] = 20
  plt.rcParams['font.family'] = 'Times New Roman'
  plt.rcParams["xtick.direction"] = "in"               #x軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.rcParams["ytick.direction"] = "in"               #y軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.xlabel('time')
  plt.ylabel("score")
  plt.xlim(0,max(x))
  plots = plt.plot(x, A)
  plt.ticklabel_format(style="sci",  axis="y",scilimits=(0,0))
  plt.savefig(basepass + "start_change" + str(w1*3) + ".png", bbox_inches='tight', pad_inches=0.1)
  plt.cla()
  df = pd.DataFrame(A,index = x,columns = [str(w1*3)])
  if w1 ==1:
    dfall = df
  dfall = pd.concat([dfall,df],axis=1).fillna(method="ffill")
dfall.to_csv(basepass + "start_cf_score.csv")
for w1 in range(1,6):
  A = sst(Joint1,w1*3)
  x =[]
  for i in range(len(A)):
    x.append((i+w1*3)/30)
  print(x)
  plt.rcParams['figure.figsize'] = [6.4, 4.8]
  plt.rcParams["font.size"] = 20
  plt.rcParams['font.family'] = 'Times New Roman'
  plt.rcParams["xtick.direction"] = "in"               #x軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.rcParams["ytick.direction"] = "in"               #y軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.xlabel('time')
  plt.ylabel("score")
  plt.xlim(0,max(x))
  plots = plt.plot(x, A)

  plt.ticklabel_format(style="sci",  axis="y",scilimits=(0,0))
  plt.savefig(basepass + "end_change" + str(w1*3) + ".png", bbox_inches='tight', pad_inches=0.1)
  plt.cla()
  df = pd.DataFrame(A,index = x,columns = [str(w1*3)])
  if w1 ==1:
    dfall = df
  dfall = pd.concat([dfall,df],axis=1).fillna(method="ffill")
dfall.to_csv(basepass + "end_cf_score.csv")
for w1 in range(1,6):
  A = sst(Joint_diff,w1*3)
  x =[]
  for i in range(len(A)):
    x.append((i+w1*3)/30)
  print(x)
  plt.rcParams['figure.figsize'] = [6.4, 4.8]
  plt.rcParams["font.size"] = 20
  plt.rcParams['font.family'] = 'Times New Roman'
  plt.rcParams["xtick.direction"] = "in"               #x軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.rcParams["ytick.direction"] = "in"               #y軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.xlabel('time')
  plt.ylabel("score")
  plt.xlim(0,max(x))
  plots = plt.plot(x, A)
  plt.ticklabel_format(style="sci",  axis="y",scilimits=(0,0))
  plt.savefig(basepass + "start_diff_change" + str(w1*3) + ".png", bbox_inches='tight', pad_inches=0.1)
  plt.cla()
  df = pd.DataFrame(A,index = x,columns = [str(w1*3)])
  if w1 ==1:
    dfall = df
  dfall = pd.concat([dfall,df],axis=1).fillna(method="ffill")
dfall.to_csv(basepass + "start_diff_cf_score.csv")
for w1 in range(1,6):
  A = sst(Joint1_diff,w1*3)
  x =[]
  for i in range(len(A)):
    x.append((i+w1*3)/30)
  print(x)
  plt.rcParams['figure.figsize'] = [6.4, 4.8]
  plt.rcParams["font.size"] = 20
  plt.rcParams['font.family'] = 'Times New Roman'
  plt.rcParams["xtick.direction"] = "in"               #x軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.rcParams["ytick.direction"] = "in"               #y軸の目盛線が内向き('in')か外向き('out')か双方向か('inout')
  plt.xlabel('time')
  plt.ylabel("score")
  plt.xlim(0,max(x))
  plots = plt.plot(x, A)
  plt.ticklabel_format(style="sci",  axis="y",scilimits=(0,0))
  plt.savefig(basepass + "end__diff_change" + str(w1*3) + ".png", bbox_inches='tight', pad_inches=0.1)
  plt.cla()
  df = pd.DataFrame(A,index = x,columns = [str(w1*3)])
  if w1 ==1:
    dfall = df
  dfall = pd.concat([dfall,df],axis=1).fillna(method="ffill")
dfall.to_csv(basepass + "end_diff_cf_score.csv")
